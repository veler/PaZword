<#@ template debug="false" hostspecific="true" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".cs" #>
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System.Reflection;
using System.Resources;

// General Information about an assembly is controlled through the following 
// set of attributes. Change these attribute values to modify the information
// associated with an assembly.
[assembly: AssemblyTitle("PaZword.Api")]
[assembly: AssemblyDescription("")]
[assembly: AssemblyConfiguration("")]
[assembly: AssemblyCompany("Etienne BAUDOUX")]
[assembly: AssemblyProduct("PaZword")]
[assembly: AssemblyCopyright("© <#= DateTime.Now.Year.ToString() #> Etienne BAUDOUX. All rights reserved.")]
[assembly: AssemblyTrademark("")]
[assembly: AssemblyCulture("")]



// Version information for an assembly consists of the following four values:
//
//      Major Version
//      Minor Version 
//      Build Number
//      Revision
//
// You can specify all the values or you can default the Build and Revision Numbers 
// by using the '*' as shown below:
// [assembly: AssemblyVersion("1.0.*")]
[assembly: AssemblyVersion("<#= Version #>")]
[assembly: AssemblyFileVersion("<#= Version #>")]

<#+

private string _version;
string Version {
    get
    {
        if (string.IsNullOrEmpty(_version))
        {
            _version = GetVersion();
        }

        return _version;
    }
}

string GetVersion()
{
    var stringsFolder = Host.ResolvePath(@"");
    var assemblyInfoFilePath = stringsFolder + @"\AssemblyInfo.cs";
    var date = System.DateTime.UtcNow;

    if (File.Exists(assemblyInfoFilePath))
    {
        var searchedString = $"[assembly: AssemblyVersion(\"{date.Year}.{date.Month}.{date.Day}.";
        var lines = File.ReadAllLines(assemblyInfoFilePath);
        var version = lines.FirstOrDefault(line => line.StartsWith(searchedString));

        if (!string.IsNullOrWhiteSpace(version))
        {
            var currentRevisionString = version.Replace(searchedString, string.Empty).Replace("\")]", string.Empty);
            int currentRevision = 0;

            if (int.TryParse(currentRevisionString, out currentRevision))
            {
                currentRevision++;
                return $"{date.Year}.{date.Month}.{date.Day}.{currentRevision}";
            }
        }
    }

    return $"{date.Year}.{date.Month}.{date.Day}.1";
}
#>